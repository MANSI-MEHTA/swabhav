package com.techlabs.service;

import java.security.Key;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;



import com.sun.mail.util.BASE64DecoderStream;
import com.techlabs.entity.User;
import com.techlabs.repo.UserRepo;

@Service("userservice")
public class UserService {

	@Autowired
	private UserRepo user_repo;

	public boolean authenticateUser(String username,String password) {
		return this.user_repo.AuthenticateUser(username,password);
	}

	public boolean checkUserExists(String email) {
		return this.user_repo.checkUserExists(email);
	}

	public void registerUser(User user) {
		this.user_repo.registerUser(user);
	}

	public User getUserByAcc_no(long acc_no) {
		return this.user_repo.getUserByAcc_no(acc_no);
	}

	public void changeToActivateState(User user){
		this.user_repo.changeToActivateState(user);
	}
	public UserRepo getUser_repo() {
		return user_repo;
	}

	@Autowired
	public void setUser_repo(UserRepo user_repo) {
		this.user_repo = user_repo;
	}
	
	
	private  final String ALGO = "AES";
    private  final byte[] keyValue =
            new byte[]{'T', 'h', 'e', 'B', 'e', 's', 't', 'S', 'e', 'c', 'r', 'e', 't', 'K', 'e', 'y'};

    /**
     * Encrypt a string with AES algorithm.
     *
     * @param data is a string
     * @return the encrypted string
     */
    public  String encrypt(String data) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.ENCRYPT_MODE, key);
        byte[] encVal = c.doFinal(data.getBytes());
        return new BASE64Encoder().encode(encVal);
    }

    /**
     * Decrypt a string with AES algorithm.
     *
     * @param encryptedData is a string
     * @return the decrypted string
     */
    public  String decrypt(String encryptedData) throws Exception {
        Key key = generateKey();
        Cipher c = Cipher.getInstance(ALGO);
        c.init(Cipher.DECRYPT_MODE, key);
        byte[] decordedValue = new BASE64DecoderStream().decodeBuffer(encryptedData);
        byte[] decValue = c.doFinal(decordedValue);
        return new String(decValue);
    }

    /**
     * Generate a new encryption key.
     */
    private Key generateKey() throws Exception {
        return new SecretKeySpec(keyValue, ALGO);
    }
}
